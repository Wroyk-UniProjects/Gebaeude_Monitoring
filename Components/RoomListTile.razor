<div class="mt-6 p-6 w-80 shadow-md bg-white text-gray-800">

    <div class="flex flex-row justify-between">

        <div>
            <p class="text-4xl font-bold">@Room.Name</p>
            <p class=" @statusTextColor">@statusText</p>
        </div>

        <div>
            <div class="@statusColor text-center rounded-lg w-12 h-12 grid place-items-center">
                @if (Room.Individual)
                {
                    <p class="font-bold">I</p>
                }
                else
                {
                    <p class="font-bold">G</p>
                }
            </div>
        </div>

    </div>

    <div class="flex flex-row justify-around">
        <p class="font-bold">Temp.</p><p>@Room.Temp / @Room.TargetTemp</p>
        <p class="font-bold">Humi.</p><p>@Room.Humid / @Room.TargetHum</p>
    </div>

</div>

@code {
    [Parameter]
    public Room Room { get; set; }

    private String statusColor = "bg-gray-400";
    private String statusTextColor = "text-gray-400";
    private String statusText = "Unknow";

    protected override Task OnParametersSetAsync()
    {   
        switch (Room.Status){
            case "ok":
                statusColor = "bg-lime-500";
                statusTextColor = "text-lime-500";
                statusText = "OK";
                break;

            case "too high":
                statusColor = "bg-red-600";
                statusTextColor = "text-red-600";
                statusText = "Exceeds target";
                break;

            case "too low":
                statusColor = "bg-cyan-400";
                statusTextColor = "text-cyan-400";
                statusText = "Below target";
                break;

            default:
                statusColor = "bg-gray-400";
                statusTextColor = "test-gray-400";
                statusText = "Unknow";
                break;

        }

        return base.OnParametersSetAsync();
    }

}
